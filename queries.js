var sqlqueries = {"01_beginner - 00_comment":"-- single line comment\r\n\r\n\/* comments in SQL can \r\n   also be multiline *\/\r\n","01_beginner - 01_select":"\/* Query all entries from the column RegionDescription of the Region table *\/\r\n\r\nSELECT RegionDescription FROM Region\r\n","01_beginner - 02_where":"\/* Query entries from multiple columns of the Order table where ShipCountry is Germany and ShipPostalCode is 68306 *\/\r\n\r\nSELECT Id, ShipName, OrderDate FROM [Order] WHERE ShipCountry = 'Germany' AND ShipPostalCode = '68306'","01_beginner - 03_limit":"\/* Query 10 entries from multiple columns of the Order table *\/\r\n\r\nSELECT Id, ShipName, OrderDate FROM [Order] LIMIT 0,10","01_beginner - 04_orderby":"\/* Query 10 entries from multiple columns of the Order table ordered by OrderDate descending *\/\r\n\r\nSELECT Id, ShipName, OrderDate FROM [Order] ORDER BY OrderDate DESC LIMIT 0,10","01_beginner - 05_groupby":"\/* Query ShipCountry and Orders per ShipCountry from the Order table *\/\r\n\r\nSELECT ShipCountry, COUNT(*) as Orders FROM [Order] GROUP BY ShipCountry ORDER BY COUNT(*) DESC","01_beginner - 06_strftime":"\/* Query ShipCountry, year of the order (via STRFTIME) and number of orders from the Order table *\/\r\n\r\nSELECT \r\n\tShipCountry, \r\n\tSTRFTIME('%Y', OrderDate) as OrderYear, \r\n\tCOUNT(*) as Orders \r\nFROM [Order] \r\nGROUP BY\r\n\tShipCountry, \r\n\tSTRFTIME('%Y', OrderDate)\r\nORDER BY \r\n\tSTRFTIME('%Y', OrderDate) DESC,\r\n\tCOUNT(*) DESC","01_beginner - 07_case":"\/* Query all entries from the Order table and add a new column with the value DACH if the ShipCountry value is Germany, Austria or Switzerland *\/\r\n\r\nSELECT \r\n\t*, \r\n\tCASE \r\n\tWHEN ShipCountry IN ('Germany', 'Austria', 'Switzerland') THEN 'DACH'\r\n\tELSE 'non-DACH' \r\n\tEND AS DACH\r\nFROM [Order] ","01_beginner - 08_case2":"\/* Query number of orders by year in DACH and non-DACH area *\/\r\n\r\nSELECT \r\n\tSTRFTIME('%Y', OrderDate) as OrderYear,\r\n\tCASE \r\n\tWHEN ShipCountry IN ('Germany', 'Austria', 'Switzerland') THEN 'DACH'\r\n\tELSE 'non-DACH' \r\n\tEND AS DACH,\r\n\tCOUNT(*) as Orders \r\nFROM [Order] \r\nGROUP BY\r\n\tSTRFTIME('%Y', OrderDate),\r\n\tCASE \r\n\tWHEN ShipCountry IN ('Germany', 'Austria', 'Switzerland') THEN 'DACH'\r\n\tELSE 'non-DACH' \r\n\tEND","02_advanced - 00_create":"\/* Create a temporary table with the content of the subsequent query *\/\r\n\r\nCREATE TEMPORARY TABLE OrdersByYearAndArea AS \r\nSELECT \r\n\tSTRFTIME('%Y', OrderDate) as OrderYear,\r\n\tCASE \r\n\tWHEN ShipCountry IN ('Germany', 'Austria', 'Switzerland') THEN 'DACH'\r\n\tELSE 'non-DACH' \r\n\tEND AS DACH,\r\n\tCOUNT(*) as Orders \r\nFROM [Order] \r\nGROUP BY\r\n\tSTRFTIME('%Y', OrderDate),\r\n\tCASE \r\n\tWHEN ShipCountry IN ('Germany', 'Austria', 'Switzerland') THEN 'DACH'\r\n\tELSE 'non-DACH' \r\n\tEND","02_advanced - 01_insert":"\/* Insert values into the table OrdersByYearAndArea *\/\r\n\r\nINSERT INTO OrdersByYearAndArea (OrderYear,DACH,Orders) VALUES('2014','DACH',100),('2014','non-DACH',50);","02_advanced - 02_update":"\/* Update all rows in OrdersByYearAndArea table, reduce Orders value by 1 *\/\r\n\r\nUPDATE OrdersByYearAndArea SET Orders = Orders-1\r\n","02_advanced - 03_delete":"\/* Remove rows where OrderYear value is 1996 *\/\r\n\r\nDELETE FROM OrdersByYearAndArea WHERE OrderYear = '1996'","02_advanced - 04_join":"\/* Join data from the Category table to the Product table *\/\r\n\r\nSELECT  \r\n\tProduct.Id, \r\n\tProduct.ProductName, \r\n\tCategory.CategoryName, \r\n\tCategory.Description as [CategoryDescription]\r\nFROM [Product]\r\nLEFT JOIN [Category] on Product.CategoryId = Category.id","02_advanced - 05_join2":"\/* Join data from the OrderDetail table to the Order table *\/\r\n\r\nSELECT\r\n\tCOUNT(DISTINCT [Order].Id) as Orders,\r\n\tCOUNT(*) as OrderLines\r\nFROM [Order]\r\nJOIN [OrderDetail] on [Order].ID = [OrderDetail].OrderID ","02_advanced - 06_join3":"\/* Join data from the Order table and Customer to the OrderDetail table *\/\r\n\r\nSELECT \r\n\tc.CompanyName              AS Customer, \r\n\tc.Country                  AS Country, \r\n\tCOUNT(DISTINCT od.OrderId) AS Orders,\r\n\tCOUNT(od.Id)               AS OrderLines\r\nFROM OrderDetail     AS od\r\nLEFT JOIN [Order]    AS o ON o.Id = od.orderid\r\nLEFT JOIN [Customer] AS c ON o.customerid = c.Id\r\nGROUP BY c.CompanyName, c.Country\r\nORDER BY COUNT(od.Id) DESC ","02_advanced - 07_join4":"\n\nSELECT \n    p.ProductName, \n    strftime('%Y', o.OrderDate) as OrderYear,\n    od.UnitPrice*od.Quantity*(1-od.Discount) as Sales\nFROM Product p \nINNER JOIN OrderDetail od on p.Id = od.ProductId\nINNER JOIN [Order] o on o.[Id] = od.OrderID\nGROUP BY p.ProductName, strftime('%Y', o.OrderDate)\nORDER BY strftime('%Y', o.OrderDate) ASC, od.UnitPrice*od.Quantity*(1-od.Discount) DESC;\n\n\n\n\n\n\n\nSELECT \n    p.ProductName, \n    strftime('%Y', o.OrderDate) as OrderYear,\n    od.UnitPrice*od.Quantity*(1-od.Discount) as Sales,\n    count(distinct o.[Id]) as Orders,\n    count(*) as OrderLines,\n    sum(od.Quantity) as Quantity\nFROM Product p \nINNER JOIN OrderDetail od on p.Id = od.ProductId\nINNER JOIN [Order] o on o.[Id] = od.OrderID\nGROUP BY p.ProductName, strftime('%Y', o.OrderDate)\nORDER BY strftime('%Y', o.OrderDate) ASC, od.UnitPrice*od.Quantity*(1-od.Discount) DESC;\n\n\n\nSELECT \n    o.[Id],\n    p.ProductName, \n    o.OrderDate,\n    od.UnitPrice,\n    od.Quantity,\n    od.Discount,\n    od.UnitPrice*od.Quantity*(1-od.Discount) as Sales\nFROM OrderDetail od\nINNER JOIN Product p on p.Id = od.ProductId\nINNER JOIN [Order] o on o.[Id] = od.OrderID\nORDER BY o.OrderDate ASC;\n\n\n\n\nSELECT \n    o.[Id] as [Order],\n    od.ProductId,\n    p.ProductName, \n    o.OrderDate,\n    od.UnitPrice,\n    od.Quantity,\n    od.Discount,\n    od.UnitPrice*od.Quantity*(1-od.Discount) as Sales\nFROM OrderDetail od\nINNER JOIN Product p on p.Id = od.ProductId\nINNER JOIN [Order] o on o.[Id] = od.OrderID\nORDER BY o.OrderDate ASC;\n\n\n\n\nSELECT \n    [Order].[Id] as [Order],\n    od.ProductId,\n    [Customer].CompanyName as Customer,\n    --[Product].ProductName, \n    [Order].OrderDate,\n    [Shipper].CompanyName as Carrier,\n    od.UnitPrice,\n    od.Quantity,\n    od.Discount,\n    round(od.UnitPrice*od.Quantity*(1-od.Discount),2) as Sales\nFROM OrderDetail od\nINNER JOIN [Product] on [Product].Id = od.ProductId\nINNER JOIN [Order] on [Order].[Id] = od.OrderID\nINNER JOIN [Shipper] on [Order].[ShipVia] = [Shipper].[Id]\nINNER JOIN [Customer] on [Order].CustomerId = [Customer].[Id]\nORDER BY [Order].OrderDate ASC;","02_advanced - 08_rownumber":"\/* Select top 3 products for each customer by sum of sales quantity *\/\r\n\r\nSELECT * FROM (\r\nSELECT \r\n\tc.CompanyName              AS Customer, \r\n    od.ProductId               AS ProductId,\r\n\tp.ProductName              AS Product,\r\n\tSUM(od.Quantity)           AS Quantity,\r\n\tROW_NUMBER() OVER(\r\n\t\tPARTITION BY c.CompanyName\r\n\t\tORDER BY SUM(od.Quantity) DESC\r\n\t) AS Ranking\r\nFROM OrderDetail     AS od\r\nLEFT JOIN [Order]    AS o ON o.Id = od.orderid\r\nLEFT JOIN [Customer] AS c ON o.customerid = c.Id\r\nLEFT JOIN [Product]  AS p ON od.ProductId = p.Id\r\nGROUP BY c.CompanyName, od.ProductId, p.ProductName\r\n) ProductRankingByCustomer\r\nWHERE Ranking < 4","02_advanced - 09_rownumber2":"\/* Select top 3 customers for each product by sum of sales quantity *\/\r\n\r\nSELECT * FROM (\r\nSELECT \r\n    od.ProductId               AS ProductId,\r\n\tp.ProductName              AS Product,\r\n\tc.CompanyName              AS Customer, \r\n\tSUM(od.Quantity)           AS Quantity,\r\n\tROW_NUMBER() OVER(\r\n\t\tPARTITION BY od.ProductId\r\n\t\tORDER BY SUM(od.Quantity) DESC\r\n\t) AS Ranking\r\nFROM OrderDetail     AS od\r\nLEFT JOIN [Order]    AS o ON o.Id = od.orderid\r\nLEFT JOIN [Customer] AS c ON o.customerid = c.Id\r\nLEFT JOIN [Product]  AS p ON od.ProductId = p.Id\r\nGROUP BY c.CompanyName, od.ProductId, p.ProductName\r\n) ProductRankingByCustomer\r\nWHERE Ranking < 4","02_advanced - 10_transaction":"-- Drop the Account table if it exists, then create it\nDROP TABLE IF EXISTS Account;\nCREATE TABLE Account (\n  account_id INTEGER PRIMARY KEY,\n  account_name TEXT,\n  balance INTEGER\n);\n\n-- Insert sample accounts\nINSERT INTO Account (account_name, balance)\nVALUES ('Alice', 1000), ('Bob', 500);\n\n-- Begin a transaction to transfer money from Alice to Bob\nBEGIN TRANSACTION;\n\n  UPDATE Account\n  SET balance = balance - 100\n  WHERE account_name = 'Alice';\n\n  UPDATE Account\n  SET balance = balance + 100\n  WHERE account_name = 'Bob';\n\nCOMMIT;\n\n-- Check the results\nSELECT * FROM Account;\n","02_advanced - 11_pragma":"-- Set the journal mode to Write-Ahead Logging for improved concurrency\nPRAGMA journal_mode = WAL;\n\n-- Change synchronous mode to NORMAL for a better performance\/robustness balance\nPRAGMA synchronous = NORMAL;\n\n-- Display the current encoding used by the database\nPRAGMA encoding;\n","02_advanced - 12_triggers":"-- Drop any existing tables to start fresh\nDROP TABLE IF EXISTS Orders;\nCREATE TABLE Orders (\n  OrderID INTEGER PRIMARY KEY,\n  CustomerName TEXT,\n  OrderDate DATE,\n  TotalAmount REAL\n);\n\nDROP TABLE IF EXISTS OrdersAudit;\nCREATE TABLE OrdersAudit (\n  AuditID INTEGER PRIMARY KEY,\n  OrderID INTEGER,\n  AuditDate DATE,\n  Action TEXT\n);\n\n-- Create a trigger that logs inserts into the OrdersAudit table\nDROP TRIGGER IF EXISTS trg_order_insert;\nCREATE TRIGGER trg_order_insert\nAFTER INSERT ON Orders\nBEGIN\n  INSERT INTO OrdersAudit (OrderID, AuditDate, Action)\n  VALUES (NEW.OrderID, date('now'), 'INSERT');\nEND;\n\n-- Test the trigger by inserting a new order\nINSERT INTO Orders (CustomerName, OrderDate, TotalAmount)\nVALUES ('Acme Inc.', '2022-05-01', 1234.56);\n\n-- Show the inserted order and corresponding audit record\nSELECT * FROM Orders;\nSELECT * FROM OrdersAudit;\n","02_advanced - 13_fibonacci":"-- Recursive CTE to generate a Fibonacci sequence\nWITH RECURSIVE Fib(n, a, b) AS (\n  SELECT 1, 0, 1  -- starting values: n=1, Fibonacci number 0, next number 1\n  UNION ALL\n  SELECT n + 1, b, a + b \n  FROM Fib \n  WHERE n < 10\n)\nSELECT n, a AS FibonacciNumber FROM Fib;\n","02_advanced - 14_rank":"-- Drop and create an Employees table\nDROP TABLE IF EXISTS Employees;\nCREATE TABLE Employees (\n  EmployeeID INTEGER PRIMARY KEY,\n  Name TEXT,\n  Department TEXT,\n  Salary INTEGER\n);\n\n-- Insert sample employee data\nINSERT INTO Employees (Name, Department, Salary) VALUES\n  ('Alice', 'Sales', 50000),\n  ('Bob', 'Sales', 60000),\n  ('Charlie', 'Sales', 55000),\n  ('David', 'Marketing', 65000),\n  ('Eva', 'Marketing', 64000),\n  ('Frank', 'Marketing', 62000);\n\n-- Use a window function to rank employees by salary in each department\nSELECT \n  EmployeeID,\n  Name,\n  Department,\n  Salary,\n  RANK() OVER (PARTITION BY Department ORDER BY Salary DESC) AS SalaryRank\nFROM Employees\nORDER BY Department, SalaryRank;\n","02_advanced - 15_json":"-- Create a table to store JSON data\nDROP TABLE IF EXISTS People;\nCREATE TABLE People (\n   id INTEGER PRIMARY KEY,\n   data JSON\n);\n\n-- Insert sample JSON data\nINSERT INTO People (data) VALUES\n   ('{\"name\": \"Alice\", \"age\": 30, \"hobbies\": [\"reading\", \"hiking\"]}'),\n   ('{\"name\": \"Bob\", \"age\": 25, \"hobbies\": [\"cooking\", \"cycling\"]}'),\n   ('{\"name\": \"Carol\", \"age\": 27, \"hobbies\": [\"swimming\", \"traveling\"]}');\n\n-- Query to extract fields from the JSON column\nSELECT \n    id,\n    json_extract(data, '$.name') AS name,\n    json_extract(data, '$.age') AS age,\n    json_extract(data, '$.hobbies[0]') AS first_hobby\nFROM People;\n\n-- Update JSON data: add a new field \"active\" set to true (1) for Bob\nUPDATE People\nSET data = json_set(data, '$.active', 1)\nWHERE json_extract(data, '$.name') = 'Bob';\n\n-- Verify the update\nSELECT id, data FROM People;\n","02_advanced - 16_views":"-- Drop and create a table representing sales transactions\nDROP TABLE IF EXISTS Sales;\nCREATE TABLE Sales (\n    SaleID INTEGER PRIMARY KEY,\n    Product TEXT,\n    SaleDate DATE,\n    Quantity INTEGER,\n    UnitPrice REAL\n);\n\n-- Insert sample sales data\nINSERT INTO Sales (Product, SaleDate, Quantity, UnitPrice)\nVALUES \n  ('Widget', '2023-01-15', 10, 2.50),\n  ('Widget', '2023-01-20', 5, 2.50),\n  ('Gadget', '2023-02-01', 7, 3.00),\n  ('Widget', '2023-02-05', 8, 2.50),\n  ('Gadget', '2023-02-15', 3, 3.00);\n\n-- Create a view that summarizes sales by product\nDROP VIEW IF EXISTS SalesSummary;\nCREATE VIEW SalesSummary AS\nSELECT \n    Product,\n    COUNT(*) AS SalesCount,\n    SUM(Quantity) AS TotalQuantity,\n    ROUND(SUM(Quantity * UnitPrice), 2) AS TotalRevenue\nFROM Sales\nGROUP BY Product;\n\n-- Query the view for a summary of sales\nSELECT * FROM SalesSummary;\n","02_advanced - 17_cumulative":"-- Create a table with daily expense records\nDROP TABLE IF EXISTS Expenses;\nCREATE TABLE Expenses (\n    ExpenseDate DATE,\n    Amount REAL\n);\n\n-- Insert sample daily expenses data\nINSERT INTO Expenses (ExpenseDate, Amount) VALUES \n  ('2023-01-01', 10.0),\n  ('2023-01-02', 15.0),\n  ('2023-01-03', 20.0),\n  ('2023-01-04', 5.0),\n  ('2023-01-05', 12.0);\n\n-- Use a window function to compute a cumulative expense total by date\nSELECT \n    ExpenseDate,\n    Amount,\n    SUM(Amount) OVER (ORDER BY ExpenseDate ASC) AS CumulativeTotal\nFROM Expenses\nORDER BY ExpenseDate ASC;\n","03_dates - 00_date":"\/* Output different dates - today, current first day of the month, end of month, first of may 2022 *\/\n\nSELECT \n    date('now') as \"today\",\n    date('now','start of month') as \"start of month\", \n    date('now','start of month','+1 month') as \"end of month\",\n    date('2022-05-01') as \"first of may 2022\"\n","03_dates - 01_timeperiods":"\/* Output of different time windows with description *\/\n\nSELECT \n  'CM' as \"period\", 'current month' as \"description\",\n  date('now','start of month') as \"from\", \n  date('now','start of month','+1 month','-1 day') as \"till\"\n\nUNION ALL\n\nSELECT \n  'YTM' as \"period\", 'year to month' as \"description\",\n  date('now','start of year') as \"from\", \n  date('now','start of month','-1 day') as \"till\"\n\nUNION ALL\n\nSELECT \n  'YTD' as \"period\", 'year to date' as \"description\",\n  date('now','start of year') as \"from\", \n  date('now','-1 day') as \"till\"\n\nUNION ALL\n\nSELECT \n  'MTD' as \"period\", 'month to date' as \"description\",\n  date('now','start of month') as \"from\", \n  date('now','-1 day') as \"till\"\n\nUNION ALL\n\nSELECT \n  'SMPY' as \"period\", 'same month previous year' as \"description\",\n  date('now','start of month','-1 year') as \"from\", \n  date('now','start of month','+1 month','-1 day','-1 year') as \"till\"  \n\nUNION ALL\n\nSELECT \n  'PM' as \"period\", 'previous month' as \"description\",\n  date('now','start of month','-1 month') as \"from\", \n  date('now','start of month','-1 day') as \"till\"\n\nUNION ALL\n\nSELECT \n  'PY' as \"period\", 'previous year' as \"description\",\n  date('now','start of year','-1 year') as \"from\", \n  date('now','start of year','-1 day') as \"till\"\n\nUNION ALL\n\nSELECT \n  'PMPY' as \"period\", 'previous month in previous year' as \"description\",\n  date('now','start of month','-1 month','-1 year') as \"from\", \n  date('now','start of month','-1 day','-1 year') as \"till\"\n\nUNION ALL\n\nSELECT \n  '365' as \"period\", 'last 365 days' as \"description\",\n  date('now','-366 days') as \"from\", \n  date('now','-1 day') as \"till\";\n","03_dates - 02_calendar":"-- Create and populate the calendar table if not exists\nCREATE TEMPORARY TABLE IF NOT EXISTS calendar (\n  \"date\" DATE UNIQUE NOT NULL,\n  \"dow\" INT NOT NULL\n);\n\nINSERT OR IGNORE INTO calendar\nSELECT d, (CAST(strftime('%w', d) AS INT) + 6) % 7\nFROM (\n  WITH RECURSIVE dates(d) AS (\n    VALUES(date('now','-2 year'))\n    UNION ALL\n    SELECT date(d, '+1 day') FROM dates WHERE d < date('now','+1 year')\n  )\n  SELECT d FROM dates\n);\n\nSELECT \n  SUBSTR('JanFebMarAprMayJunJulAugSepOctNovDec', (CAST(strftime('%m', date) AS INTEGER)-1)*3+1, 3) AS Month,\n  COUNT(*) AS Days,\n  COUNT(CASE WHEN dow < 5 THEN 1 END) AS Weekdays\nFROM calendar\nWHERE strftime('%Y', date) = strftime('%Y', date('now'))\nGROUP BY strftime('%m', date)\nORDER BY strftime('%m', date) ASC;","03_dates - 03_groupbymonth":"\/* select number of days and weekdays of each month in current year *\/\n\nCREATE TEMPORARY TABLE IF NOT EXISTS calendar (\n  \"date\" date UNIQUE NOT NULL,\n  \"dow\" INT NOT NULL\n);\n\nINSERT OR ignore INTO \"calendar\"\nSELECT * FROM (\n  WITH RECURSIVE dates(d) AS (\n    VALUES(date('now','-2 year'))\n    UNION ALL\n    SELECT date(d, '+1 day') FROM dates WHERE d < date('now','+1 year')\n  )\n  SELECT d, (CAST(strftime('%w', d) AS INT) + 6) % 7 AS \"dow\" FROM dates\n);\n\nSELECT \n  substr('JanFebMarAprMayJunJulAugSepOctNovDec', 1 + 3*strftime('%m', \"date\"), -3) as \"Month\",\n  COUNT(*) as \"Days\",\n  COUNT(CASE WHEN \"calendar\".\"dow\" < 5 THEN 1 END) as \"Weekdays\"\nFROM \"calendar\"\nWHERE strftime('%Y', \"date\") = strftime('%Y', date('now'))\nGROUP BY strftime('%m', \"date\")\nORDER BY strftime('%m', \"date\") ASC;\n","03_dates - 04_joincalendar":"\/* combine \"timeperiods\" example with \"calendar\" example *\/\n\nCREATE TEMPORARY TABLE IF NOT EXISTS calendar (\n  \"date\" date UNIQUE NOT NULL,\n  \"dow\" INT NOT NULL\n);\n\nINSERT OR ignore INTO \"calendar\"\nSELECT * FROM (\n  WITH RECURSIVE dates(d) AS (\n    VALUES(date('now','-2 year'))\n    UNION ALL\n    SELECT date(d, '+1 day') FROM dates WHERE d < date('now','+1 year')\n  )\n  SELECT d, (CAST(strftime('%w', d) AS INT) + 6) % 7 AS \"dow\" FROM dates\n);\n\nSELECT \n  \"period\", \n  \"description\", \n  \"from\", \n  \"till\", \n  CAST (JulianDay(\"till\") - JulianDay(\"from\") as Integer) as \"days\",\n  COUNT(CASE WHEN \"calendar\".\"dow\" < 5 THEN 1 END) as \"weekdays\"\nFROM (\n\nSELECT \n  'CM' as \"period\", 'current month' as \"description\",\n  date('now','start of month') as \"from\", \n  date('now','start of month','+1 month','-1 day') as \"till\"\n\nUNION ALL\n\nSELECT \n  'YTM' as \"period\", 'year to month' as \"description\",\n  date('now','start of year') as \"from\", \n  date('now','start of month','-1 day') as \"till\"\n\nUNION ALL\n\nSELECT \n  'YTD' as \"period\", 'year to date' as \"description\",\n  date('now','start of year') as \"from\", \n  date('now','-1 day') as \"till\"\n\nUNION ALL\n\nSELECT \n  'MTD' as \"period\", 'month to date' as \"description\",\n  date('now','start of month') as \"from\", \n  date('now','-1 day') as \"till\"\n\nUNION ALL\n\nSELECT \n  'SMPY' as \"period\", 'same month previous year' as \"description\",\n  date('now','start of month','-1 year') as \"from\", \n  date('now','start of month','+1 month','-1 day','-1 year') as \"till\"  \n\nUNION ALL\n\nSELECT \n  'PM' as \"period\", 'previous month' as \"description\",\n  date('now','start of month','-1 month') as \"from\", \n  date('now','start of month','-1 day') as \"till\"\n\nUNION ALL\n\nSELECT \n  'PY' as \"period\", 'previous year' as \"description\",\n  date('now','start of year','-1 year') as \"from\", \n  date('now','start of year','-1 day') as \"till\"\n\nUNION ALL\n\nSELECT \n  'PMPY' as \"period\", 'previous month in previous year' as \"description\",\n  date('now','start of month','-1 month','-1 year') as \"from\", \n  date('now','start of month','-1 day','-1 year') as \"till\"\n\nUNION ALL\n\nSELECT \n  '365' as \"period\", 'last 365 days' as \"description\",\n  date('now','-366 days') as \"from\", \n  date('now','-1 day') as \"till\"\n) x\nLEFT JOIN \"calendar\" ON \"calendar\".\"date\" BETWEEN \"x\".\"from\" AND \"x\".\"till\"\nGROUP BY \"period\",  \"description\",  \"from\",  \"till\";\n","03_dates - 05_workingtime":"\/* Here is an example that should make it clear how easy it can be to record working hours with SQL. *\/\n\n-- delete tables\nDROP TABLE IF EXISTS \"type\";\nDROP TABLE IF EXISTS \"entries\";\n\n-- create temporary tables\nCREATE TEMPORARY TABLE IF NOT EXISTS \"type\" (\n  \"status\" TEXT UNIQUE NOT NULL,\n  \"work\" INT NOT NULL,\n  \"comment\" TEXT NULL\n);\n\nCREATE TEMPORARY TABLE IF NOT EXISTS \"entries\" (\n  \"date\" DATE NOT NULL,\n  \"type\" TEXT NOT NULL,\n  \"user\" TEXT NOT NULL,\n  \"comment\" TEXT NULL\n);\n\n-- insert working time registration entries\nINSERT INTO  \"type\" (\"status\", \"work\", \"comment\") VALUES ('work', '1', 'clock in');\nINSERT INTO  \"type\" (\"status\", \"work\", \"comment\") VALUES ('end of work', '0', 'clock out');\nINSERT INTO  \"type\" (\"status\", \"work\", \"comment\") VALUES ('break', '0', 'clock out');\nINSERT INTO  \"type\" (\"status\", \"work\", \"comment\") VALUES ('clean up', '1', 'additional activities');\nINSERT INTO  \"entries\" (\"date\", \"type\", \"user\", \"comment\") VALUES ('2022-04-11 10:00:00', 'work', 'JohnDoe', '');\nINSERT INTO  \"entries\" (\"date\", \"type\", \"user\", \"comment\") VALUES ('2022-04-11 16:15:00', 'end of work', 'JohnDoe', '');\nINSERT INTO  \"entries\" (\"date\", \"type\", \"user\", \"comment\") VALUES ('2022-04-12 09:00:00', 'work', 'JohnDoe', '');\nINSERT INTO  \"entries\" (\"date\", \"type\", \"user\", \"comment\") VALUES ('2022-04-13 01:00:00', 'end of work', 'JohnDoe', '');\nINSERT INTO  \"entries\" (\"date\", \"type\", \"user\", \"comment\") VALUES ('2022-04-14 09:00:00', 'work', 'JohnDoe', '');\nINSERT INTO  \"entries\" (\"date\", \"type\", \"user\", \"comment\") VALUES ('2022-04-14 19:00:00', 'end of work', 'JohnDoe', '');\nINSERT INTO  \"entries\" (\"date\", \"type\", \"user\", \"comment\") VALUES ('2022-04-15 09:00:00', 'work', 'JohnDoe', '');\nINSERT INTO  \"entries\" (\"date\", \"type\", \"user\", \"comment\") VALUES ('2022-04-15 12:00:00', 'break', 'JohnDoe', '');\nINSERT INTO  \"entries\" (\"date\", \"type\", \"user\", \"comment\") VALUES ('2022-04-15 13:00:00', 'work', 'JohnDoe', '');\nINSERT INTO  \"entries\" (\"date\", \"type\", \"user\", \"comment\") VALUES ('2022-04-15 17:00:00', 'end of work', 'JohnDoe', '');\n\n-- select sum of working time \nSELECT\n    x. \"user\",\n    x. \"type\",\n    ROUND((JULIANDAY(\"till\") - JULIANDAY(\"from\")) * 3600) AS \"worktime\"\nFROM (\n    SELECT\n        entries. \"user\",\n        entries. \"type\",\n        \"type\".\"work\",\n        entries. \"comment\",\n        DATETIME (entries. \"date\") AS \"from\",\n        IFNULL((\n                SELECT\n                    DATETIME (nextentry. \"date\")\n                FROM\n                    entries AS nextentry\n                WHERE\n                    nextentry. \"user\" = entries. \"user\"\n                    AND DATETIME (nextentry. \"date\") > DATETIME (entries. \"date\")\n                ORDER BY\n                    DATETIME (nextentry. \"date\") ASC\n                LIMIT 0,\n                1),\n            DATETIME ('now')) AS \"till\",\n        \"type\".\"work\"\n    FROM\n        entries\n    LEFT JOIN \"type\" ON \"type\".status = entries. \"type\"\nORDER BY\n    DATETIME (entries. \"date\") ASC) x\nWHERE\n    \"work\" = 1\nGROUP BY x. \"user\",\n    x. \"type\"\n","04_login - 00_login":"\/* Here is a very simple example of what user management could look like.\nIt is very important here that even with very simple applications, a password should never be stored in plain text in the database.\nThe nice thing is that you don't have to save passwords in plain text, it's enough to save a hash result of the password.\nAnd with every login attempt, a hash value is also calculated for the entered password, which is then compared with the value in the database. If the hash matches, the user is logged in.\nIf you want to make it even more secure, you can add a so-called salt to the entered password. This makes it even more difficult for the bad guys. *\/\n\nDROP\n    TABLE IF EXISTS \"users\";\n\n\nCREATE TABLE\n    IF NOT EXISTS \"users\" (\n        \"creation\" DATE NOT NULL, \n        \"lastlogin\" DATE NOT NULL,\n        \"username\" TEXT NOT NULL, \n        \"password\" TEXT NOT NULL,\n        \"permissions\" INT NOT NULL,\n        \"comment\" TEXT NULL\n    );\n\nINSERT INTO\n    \"users\" (\"creation\", \"lastlogin\", \"username\", \"password\", \"permissions\")\nVALUES\n    (date('now'), date('now'), 'JohnDoe', 'do-not-save-passwords-use-hash-functions', 3);\n\n\nSELECT * FROM \"users\""};
